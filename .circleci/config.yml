version: 2.1
jobs:
  build:
    docker:
      - image: circleci/php:7.3-node-browsers
        #image tagは開発環境に合わせる必要がある
      - image: circleci/postgres:11.6-alpine
          #PostgreSQLのコンテナに対する環境変数
        environment:
          POSTGRES_DB: laravel
          POSTGRES_USER: default
          POSTGRES_PASSWORD: secret
      #buildジョブ全体に適用される環境変数
    environment:
      APP_ENV: testing
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: laravel
      DB_USERNAME: default
      DB_PASSWORD: secret
    steps:
      #checkoutは、GitHubからCircleCIの環境にソースコードをコピー(git clone)
      - checkout
      #sudoは他のユーザーの権限で実行するときのコマンドでオプションと実行するコマンドを組み合わせる
      #composer self-update --1はバージョン1の最新stable（安定版）にアップデート
      #バージョン1にする理由はcircleciのdocker imageがバージョン指定してインストールされていないため
      - run: sudo composer self-update --1
      #保存されたキャッシュを復元する
      - restore_cache:
          #keyには、復元するキャッシュの名前を指定
          #composer.lockに変更が無い限りは、restore_chacheでは「前回以前のCircleCI実行時のsave_cacheで保存されたキャッシュ」を復元する
          key: composer-v1-{{ checksum "composer.lock" }}
      #composer.jsonに記録されているパッケージを、composer.lockに記録されているバージョンでインストール
      #-nは--no-interactionの略で対話形式にしないようにするコマンド
      #--prefer-dist zip形式でダウンロードする(高速)　書かなくてもdistがデフォルト
      - run: composer install -n --prefer-dist
      #save_cacheでは、keyに指定した名前でキャッシュを保存
      - save_cache:
          #CircleCIでは、キャッシュを約1ヶ月保存してくれる。意図的にキャッシュをクリアする方法はない。
          #保存済みのキャッシュを無視して、新たにキャッシュを保存し直したい時はkeyに指定する名前の変更が必要
          #そんな時のために、あらかじめv1といった部分を名前に含めている
          #{{ checksum "composer.lock" }}という部分は、CircleCIのテンプレート機能を使用としてる
          #{{ checksum "ファイル名" }}とすることで、ファイルをハッシュ化した値を算出
          #もし、composer.lockに変更があれば、算出されるハッシュ値も異なったものとなり、キャッシュのkeyとして違った名前になり
          #その結果、restore_cacheでは、保存済みのキャッシュ(vendorディレクトリ)が復元されることはない
          #composer.lockに何か変更があれば、restore_chacheではキャッシュを復元せず、save_cacheで新しいkeyにてキャッシュを保存し直す
          key: composer-v1-{{ checksum "composer.lock" }}
          #保存するディレクトリ名やファイル名はpathsに指定
          #ComposerによってPHP関連のパッケージがインストールされるディレクトリであるvendorを指定
          paths:
            - vendor
      #npm ciはnpm installと違い package-lock.json から node_modules ディレクトリを構築
      #restore_cacheは復元
      - restore_cache:
          #npmによってインストールされたパッケージのキャッシュであることがわかるようにするため、先頭にnpm
          #package-lock.jsonでは、npmによってインストールされた各パッケージのバージョンが、依存パッケージも含め管理される
          key: npm-v1-{{ checksum "package-lock.json" }}
      - run:
          name: npm ci
          #複数行に渡ってコマンドを記述する時は、まず最初に|を記述
          #ifを逆さまに記述したfiは、if文の終わりを示す。[]は必須
          #[の直後と、]の直前にはそれぞれスペースが必須。!は、NOT条件
          #node_modulesというディレクトリが存在すればfalseを、存在しなければtrueを返す
          command: |
            if [ ! -d node_modules ]; then
              npm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      #JavaScriptのトランスパイル
      - run: npm run dev
      - run:
          #LaravelがPostgreSQLに接続するのに必要なソフトウェアのインストールなどを行なう
          name: get ready for postgres
          #aptは、Debian系のLinuxのパッケージ管理システム。apt-get updateでパッケージの一覧情報を最新化
          #sudoは、ルート権限で実行するために追加。sudo apt-get install libpq-devで、libpq-devをインストール。
          #pdo_pgsqlをインストールするのに必要。sudo docker-php-ext-install pdo_pgsqlでは、
          #circleci/php:7.3-node-browsersのイメージに圧縮されて入っているpdo_pgsqlをインストール。
          #LaravelでPostgeSQLと接続するためには、このpdo_pgsqlが必要
          #dockerize -wait tcp://localhost:5432 -timeout 1mは、circleci/php:7.3-node-browsersのコンテナから
          #PostgreSQLのコンテナに通信できるかの確認。-timeout 1mのオプションがあるので、通信が成功するまで最大1分待ち
          command: |
            sudo apt-get update
            sudo apt-get install libpq-dev
            sudo docker-php-ext-install pdo_pgsql
            dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: php test
          #なぜかtests/Unitディレクトリが消えてしまうため作成する
          command: |
            mkdir tests/Unit
            vendor/bin/phpunit
  #CircleCIの各ジョブは環境として独立している。ジョブが開始すると環境が構築され、終了すると廃棄される使い捨てである。
  #そのためbuildジョブの環境で作成したファイルを何もせずに利用することはできない。
  #環境間で受け渡しをする仕組みはpersist_to_workspaceという
  deploy:
    #環境があれば独立しているため再度dockerのimageを指定する
    #deployジョブではPHPやNode.jsを使用しない。他のdockerを使用してもよいが特に変更する理由もないので実績のあるものを使用する
    docker:
      - image: circleci/php:7.3-node-browsers
    steps:
      #CircleCIで設定したSSH秘密鍵をCircleCI上で使用できるようになる
      - add_ssh_keys
      - run:
          name: deploy
          #1 SSHでログイン　""の中はEC2インスタンス内で行いたいコマンドを入力　\は改行しても１つのコマンドとしてつなげる際に使用
          #-o StrictHostKeyChecking=noは初めてSSHログインしようとした時のメッセージを表示させなくするオプション
          #-t　オプションを使うと、SSHログイン先のサーバーで実行したコマンドの結果が表示される
          #webapp@${HOST_NAME}　ユーザー名と接続先のホスト名(あるいはIPアドレス)を指定
          #秘密鍵を指定する-iをしていないがログイン可能　理由としてCircleCIのadd_ssh_keysコマンドでは、秘密鍵をssh-agentというものに登録しているため
          #ssh-agentとは公開鍵認証を代行してくれる。そのため、ホストからホストへ渡り歩いてく場合でも、エージェントが認証処理を行なってくれる
          #php artisan migrate --forceは　.envファイルの環境変数APP_ENVにproduction(本番環境)を設定している場合、php artisan migrateで確認メッセージが表示される
          #--forceオプションを付けると、この確認メッセージは表示されなくなる。CircleCIからの実行では確認メッセージにyesと入力できない
          #php artisan config:cacheはLaravelの全設定ファイルを一つのファイルにまとめ、ファイルアクセス効率を高めている
          #Laravelを本番環境で稼働させる場合に、使用することが推奨されているコマンド
          command: |
            ssh -o StrictHostKeyChecking=no -t webapp@${HOST_NAME} "cd laravel && \
              git pull origin main && \
              composer install -n --no-dev --prefer-dist && \
              npm ci && \
              npm run prod && \
              php artisan migrate --force && \
              php artisan config:cache"
  #workflowsでは各ジョブの開始条件を定義
  workflows:
    #versionは2を指定
    version: 2
    #build_deployの部分は、ワークフローの名前　どんな名前でもおｋだが２つのワークフローがあるため繋げて使用する
    build_deploy:
      #各ジョブの開始条件を定義
      jobs:
        - build
        - deploy:
            #requiresでは、そのジョブが開始するにあたり、正常終了している必要のあるジョブを指定
            requires:
              - build
            #fileters, branches, onlyと指定することで、特定のブランチへのプッシュの時のみ、ジョブが動く
            #実際のケースとしては、PRを立てた開発ブランチが、mainブランチにマージされた(マージコミットがプッシュされた)時
            filters:
              branches:
                only:
                  - main



